{"ast":null,"code":"var _jsxFileName = \"/Users/rohanpareek/Documents/GitHub/roadmap.college/src/Components/ButtonGuides.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonGuides = ({\n  label,\n  isText,\n  isNew,\n  numOfMin\n}) => {\n  _s();\n  const [windowSize, setWindowSize] = useState({\n    width: window.innerWidth,\n    height: window.innerHeight\n  });\n  const handleResize = () => {\n    setWindowSize({\n      width: window.innerWidth,\n      height: window.innerHeight\n    });\n  };\n  useEffect(() => {\n    // Add event listener when component mounts\n    window.addEventListener('resize', handleResize);\n\n    // Remove event listener when component unmounts\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Empty dependency array ensures that the effect runs only once during mount and cleans up on unmount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"py-2 \",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"flex pb-2 text-xl justify-between w-full transition-all hover:text-blue-600 hover:pl-4 duration-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"\",\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), windowSize.width > 750 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"text-lg text-slate-600\",\n        children: isText ? \"Textual\" : `${numOfMin} Minutes`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 44\n      }, this), windowSize.width < 750 && /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"\\xBB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 44\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n_s(ButtonGuides, \"YYVzv4zrV9CFV7ApaTzKW0g+V3E=\");\n_c = ButtonGuides;\nexport default ButtonGuides;\nvar _c;\n$RefreshReg$(_c, \"ButtonGuides\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ButtonGuides","label","isText","isNew","numOfMin","_s","windowSize","setWindowSize","width","window","innerWidth","height","innerHeight","handleResize","addEventListener","removeEventListener","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rohanpareek/Documents/GitHub/roadmap.college/src/Components/ButtonGuides.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\n\r\ninterface ButtonProps {\r\n    label: string;\r\n    isText: boolean,\r\n    isNew: boolean,\r\n    numOfMin:string,\r\n    onClick: () => void; \r\n}\r\n\r\n\r\nconst ButtonGuides: React.FC<ButtonProps> = ({label,isText,isNew,numOfMin}) => {\r\n\r\n    const [windowSize, setWindowSize] = useState({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n      });\r\n    \r\n      const handleResize = () => {\r\n        setWindowSize({\r\n          width: window.innerWidth,\r\n          height: window.innerHeight\r\n        });\r\n      };\r\n    \r\n      useEffect(() => {\r\n        // Add event listener when component mounts\r\n        window.addEventListener('resize', handleResize);\r\n    \r\n        // Remove event listener when component unmounts\r\n        return () => {\r\n          window.removeEventListener('resize', handleResize);\r\n        };\r\n      }, []); // Empty dependency array ensures that the effect runs only once during mount and cleans up on unmount\r\n\r\n    return (\r\n        <div className='py-2 '>\r\n            <button className='flex pb-2 text-xl justify-between w-full transition-all hover:text-blue-600 hover:pl-4 duration-200'>\r\n                <span className=''>{label}</span>\r\n                {windowSize.width > 750 && <span className='text-lg text-slate-600'>{ isText ? \"Textual\" : `${numOfMin} Minutes`}</span>}\r\n                {windowSize.width < 750 && <span>&raquo;</span>}\r\n            </button>\r\n            <hr></hr>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ButtonGuides"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAYlD,MAAMC,YAAmC,GAAGA,CAAC;EAACC,KAAK;EAACC,MAAM;EAACC,KAAK;EAACC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAE3E,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC;IACzCY,KAAK,EAAEC,MAAM,CAACC,UAAU;IACxBC,MAAM,EAAEF,MAAM,CAACG;EACjB,CAAC,CAAC;EAEF,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzBN,aAAa,CAAC;MACZC,KAAK,EAAEC,MAAM,CAACC,UAAU;MACxBC,MAAM,EAAEF,MAAM,CAACG;IACjB,CAAC,CAAC;EACJ,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd;IACAY,MAAM,CAACK,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;;IAE/C;IACA,OAAO,MAAM;MACXJ,MAAM,CAACM,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAEV,oBACId,OAAA;IAAKiB,SAAS,EAAC,OAAO;IAAAC,QAAA,gBAClBlB,OAAA;MAAQiB,SAAS,EAAC,qGAAqG;MAAAC,QAAA,gBACnHlB,OAAA;QAAMiB,SAAS,EAAC,EAAE;QAAAC,QAAA,EAAEhB;MAAK;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EAChCf,UAAU,CAACE,KAAK,GAAG,GAAG,iBAAIT,OAAA;QAAMiB,SAAS,EAAC,wBAAwB;QAAAC,QAAA,EAAGf,MAAM,GAAG,SAAS,GAAI,GAAEE,QAAS;MAAS;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,EACvHf,UAAU,CAACE,KAAK,GAAG,GAAG,iBAAIT,OAAA;QAAAkB,QAAA,EAAM;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACTtB,OAAA;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAAhB,EAAA,CAlCKL,YAAmC;AAAAsB,EAAA,GAAnCtB,YAAmC;AAoCzC,eAAeA,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}